stages:
    - lint
    - build
    - test
    - doc
    - deploy

variables:
  GIT_STRATEGY: fetch

# ############################################################################
# lint stage
# ############################################################################

isort:
  stage: lint
  image: python:3.10
  tags:
    - docker
  allow_failure: false
  dependencies: []
  script:
    - echo "CHECK IMPORT ORDERS."
    - "echo $(which python ; python -V 2>&1)"
    - python -m pip install -U isort
    - python -m pip freeze > pipfreeze_isort.txt
    - python -m pip check
    - isort --version
    - isort . --check
  artifacts:
    when: always
    paths:
        - pipfreeze_isort.txt
        - isort_report.txt
        - isort_errors.txt
    expire_in: 1 week

flake3_10:
  stage: lint
  image: python:3.10
  tags:
    - docker
  allow_failure: false
  dependencies: []
  script:
    - echo "CHECK PEP8 COMPLIANCE AND OTHER POTENTIAL ERRORS (for Py3.10)"
    - "echo $(which python ; python -V 2>&1)"
    - pip install -U flake8 configparser
    - pip freeze > pipfreeze.flake3_10.txt
    - pip check
    - python -m flake8 . --exclude migrations | tee flake3.10.log
  artifacts:
    when: always
    paths:
        - pipfreeze.flake3_10.txt
        - flake3.10.log
    expire_in: 1 week

docstring_check:
  stage: lint
  image: python:3.10
  tags:
    - docker
  allow_failure: true
  dependencies: []
  script:
    - echo "CHECK FOR MISSING OR NON-COMPLIANT DOCSTRINGS IN PYTHON FILES."
    - "echo $(which python ; python -V 2>&1)"
    - pip install -U flake8-docstrings
    - pip freeze > pipfreeze.flake_3.10_docstring_check.txt
    - pip check
    - python -m flake8 . --exclude migrations --docstring-convention pep257 | tee flake_3.10_docstring_check.log
    - errors=$(grep 'docstring' flake_3.10_docstring_check.txt | wc -l)
    - test "$errors" -le 0
  artifacts:
    when: always
    paths:
        - pipfreeze.flake_3.10_docstring_check.txt
        - flake_3.10_docstring_check.log
    expire_in: 1 week

mypy:
  stage: lint
  image: python:3.10
  tags:
    - docker
  allow_failure: true
  script:
    - echo "CHECK ANNOTATIONS."
    - "echo $(which python ; python -V 2>&1)"
    - pip install -U mypy
    - pip freeze > pipfreeze.mypy_3.10_check.txt
    - pip check
    - python -m mypy --ignore-missing-imports .
  artifacts:
    when: always
    paths:
        - pipfreeze.flake_3.10_docstring_check.txt
        - mypy_3.10_check.log
    expire_in: 1 week

shellcheck:
  stage: lint
  image: koalaman/shellcheck-alpine:latest
  tags:
    - docker
  before_script:
    - apk update
    - apk add git
  allow_failure: true
  dependencies: []
  script:
    - echo "This job checks shell scripts for potential errors."
    - git ls-files --exclude='*.sh' --ignored -c -z | xargs -0r shellcheck

htmlhint:
  stage: lint
  tags:
    - docker
  allow_failure: true
  dependencies: []
  script:
    - echo "PERFORM STATIC CODE ANALYSIS OF HTML FILES"
    - touch htmlhint.log
    - "htmlhint . > htmlhint.log || true"
    - echo "=== first 100 lines of issues" ; cat htmlhint.log || true
  artifacts:
    when: always
    paths:
        - htmlhint.log
    expire_in: 1 week

csslint:
  stage: lint
  tags:
    - docker
  allow_failure: true
  dependencies: []
  script:
    - echo "PERFORM CSS LINT"
    - touch csslint.log
    - "csslint . > csslint.log || true"
    - echo "=== CSSLint issues" ; cat csslint.log || true
  artifacts:
    when: always
    paths:
        - csslint.log
    expire_in: 1 week


# ############################################################################
# Test stage
# ############################################################################

check-migrations_dj4_2:
  stage: test
  tags:
    - docker
  image: python:3.10
  allow_failure: false
  dependencies: []
  before_script:
    - apt update
    - pip install -U pip
    - pip install -r requirements.txt -U
    - pip freeze > pipfreeze_check_migrations_dj4_2.txt
    - pip check  
  script:
    - echo "CHECK MIGRATIONS"
    - echo "PATH is $PATH"
    - touch pytest.status pytest.log
    - python manage.py makemigrations
    - python manage.py migrate
    - unmigrated_cnt=$(./manage.py showmigrations | grep -Eve '\[X\]' | grep -c '\[' ) || true
    - test $unmigrated_cnt = 0

  artifacts:
    when: always
    paths:
        - pipfreeze_check_migrations_dj4_2.txt
    expire_in: 1 week

pytest:
  stage: test
  tags:
    - docker
  image: python:3.10
  allow_failure: false
  dependencies: []
  before_script:
    - apt update
    - pip install -U pip
    - pip install -r requirements.txt -U
    - pip freeze > pipfreeze_tst_py310_dj42.txt
    - pip check
  script:
    - echo "RUNNING UNIT TESTS"
    - echo "PATH is $PATH"
    - "echo test start: $(date +'%Y%-%m-%d %H:%M:%S %s')"
    - pytest --junitxml=report.xml | tee -a pytest.log
    - grep -Ee '== .*(failed|passed|skipped|warning|errors).* in .* ==' pytest.log > pytest.status
    - cat pytest.status
    - fail_cnt=$(cat pytest.status | sed -e 's/ failed.*// ; s/.* / / ; s/.*=.*/0/ ' | python -c 'import sys ; print(sum([int(v) for v in sys.stdin.read().split()]))' )
    - skip_cnt=$(cat pytest.status | sed -e 's/ skipped.*// ; s/.* / / ; s/.*=.*/0/ ' | python -c 'import sys ; print(sum([int(v) for v in sys.stdin.read().split()]))' )
    - warn_cnt=$(cat pytest.status | sed -e 's/ warning.*// ; s/.* / / ; s/.*=.*/0/ ' | python -c 'import sys ; print(sum([int(v) for v in sys.stdin.read().split()]))' )
    - err_cnt=$(cat pytest.status  | sed -e 's/ error.*// ; s/.* / / ; s/.*=.*/0/ ' | python -c 'import sys ; print(sum([int(v) for v in sys.stdin.read().split()]))' )
    - echo "E:$err_cnt W:$warn_cnt S:$skip_cnt F:$fail_cnt"
    - test $err_cnt -le 0
    - test $warn_cnt -le 0
    - test $skip_cnt -le 0
    - test $fail_cnt -le 0
    - "echo test end: $(date +'%Y%-%m-%d %H:%M:%S %s')"

  artifacts:
    when: always
    paths:
        - pipfreeze_tst_py310_dj42.txt
        - pytest.log
        - pytest.status
    expire_in: 1 week


# ############################################################################
# Deploy stage
# ############################################################################

deploy-prod:
  stage: deploy
  script:
    - echo "DEPLOY FROM $CI_COMMIT_BRANCH branch (TODO)"
  when: manual
  environment: production
