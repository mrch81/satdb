stages:
    - lint
    - build
    - test
    - doc
    - deploy

variables:
  GIT_STRATEGY: fetch
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

cache:
  paths:
    - .cache/pip

image: python:3.12


# ############################################################################
# lint stage
# ############################################################################

isort:
  stage: lint
  tags:
    - gitlab-org-docker
  allow_failure: false
  dependencies: []
  script:
    - echo "CHECK IMPORT ORDERS."
    - "echo $(which python ; python -V 2>&1)"
    - python -m pip install -U isort
    - python -m pip freeze > pipfreeze_isort.txt
    - python -m pip check
    - isort --version
    - isort . --check
  artifacts:
    when: on_failure
    paths:
        - pipfreeze_isort.txt
        - isort_report.txt
        - isort_errors.txt
    expire_in: 1 week

flake8:
  stage: lint
  tags:
    - gitlab-org-docker
  allow_failure: false
  dependencies: []
  script:
    - echo "CHECK PEP8 COMPLIANCE AND OTHER POTENTIAL ERRORS (for Py3.12)"
    - "echo $(which python ; python -V 2>&1)"
    - pip install -U flake8 configparser
    - pip freeze > pipfreeze.flake8.txt
    - pip check
    - python -m flake8 . --exclude migrations | tee flake3.12.log
  artifacts:
    when: on_failure
    paths:
        - pipfreeze.flake8.txt
        - flake3.12.log
    expire_in: 1 week

docstring_check:
  stage: lint
  tags:
    - gitlab-org-docker
  allow_failure: true
  dependencies: []
  script:
    - echo "CHECK FOR MISSING OR NON-COMPLIANT DOCSTRINGS IN PYTHON FILES."
    - "echo $(which python ; python -V 2>&1)"
    - pip install -U flake8-docstrings
    - pip freeze > pipfreeze.flake_3.12_docstring_check.txt
    - pip check
    - python -m flake8 . --exclude migrations --per-file-ignores="__init__.py:D104" --docstring-convention pep257 | tee flake_3.12_docstring_check.log
  artifacts:
    when: on_failure
    paths:
        - pipfreeze.flake_3.12_docstring_check.txt
        - flake_3.12_docstring_check.log
    expire_in: 1 week

mypy:
  stage: lint
  tags:
    - gitlab-org-docker
  allow_failure: true
  script:
    - echo "CHECK TYPE HINTS."
    - "echo $(which python ; python -V 2>&1)"
    - pip install -U mypy
    - pip freeze > pipfreeze.mypy_3.12_check.txt
    - pip check
    - python -m mypy --ignore-missing-imports --disable-error-code=import-untyped .
  artifacts:
    when: on_failure
    paths:
        - pipfreeze.flake_3.12_docstring_check.txt
        - mypy_3.12_check.log
    expire_in: 1 week

htmlhint:
  image: node:22
  tags:
    - gitlab-org-docker
  stage: lint
  allow_failure: false
  script:
    - echo "PERFORM STATIC CODE ANALYSIS OF HTML FILES."
    - npm install -g htmlhint@0.11.0
    - htmlhint app/

eslint:
  image: node:22
  tags:
    - gitlab-org-docker
  stage: lint
  allow_failure: false
  script:
    - echo "ES LINTS."
    - npm install eslint eslint-config-google --legacy-peer-deps
    - $(npm bin)/eslint --format table app > eslint.log || true
    - head -50 eslint.log
    - total_errors=$(cat eslint.log | grep error -c || true) ;  echo "TOTAL ERRORS $total_errors"
    - test $total_errors -le 0

csslint:
  stage: lint
  tags:
    - gitlab-org-docker
  allow_failure: true
  dependencies: []
  script:
    - echo "PERFORM CSS LINT"
    - touch csslint.log
    - "csslint . > csslint.log || true"
    - echo "=== CSSLint issues" ; cat csslint.log || true

# shellcheck:
#   stage: lint
#   image: koalaman/shellcheck-alpine:latest
#   tags:
#     - gitlab-org-docker
#   before_script:
#     - apk update
#     - apk add git
#   allow_failure: true
#   dependencies: []
#   script:
#     - echo "This job checks shell scripts for potential errors."
#     - git ls-files --exclude='*.sh' --ignored -c -z | xargs -0r shellcheck
# 

# ############################################################################
# Test stage
# ############################################################################

check-migrations_dj4_2:
  stage: test
  tags:
    - gitlab-org-docker
  allow_failure: false
  dependencies: []
  before_script:
    - apt update
    - pip install -U pip
    - pip install -r requirements.txt -U
    - pip freeze > pipfreeze_check_migrations_dj4_2.txt
    - pip check  
  script:
    - echo "CHECK MIGRATIONS"
    - echo "PATH is $PATH"
    - touch pytest.status pytest.log
    - python manage.py makemigrations
    - python manage.py migrate
    - unmigrated_cnt=$(./manage.py showmigrations | grep -Eve '\[X\]' | grep -c '\[' ) || true
    - test $unmigrated_cnt = 0

  artifacts:
    when: on_failure
    paths:
        - pipfreeze_check_migrations_dj4_2.txt
    expire_in: 1 week

pytest:
  stage: test
  tags:
    - gitlab-org-docker
  allow_failure: false
  dependencies: []
  before_script:
    - apt update
    - pip install -U pip
    - pip install -r requirements.txt -U
    - pip freeze > pipfreeze_tst_py310_dj42.txt
    - pip check
  script:
    - echo "RUNNING UNIT TESTS"
    - echo "PATH is $PATH"
    - "echo test start: $(date +'%Y%-%m-%d %H:%M:%S %s')"
    - pytest --junitxml=report.xml | tee -a pytest.log
    - grep -Ee '== .*(failed|passed|skipped|warning|errors).* in .* ==' pytest.log > pytest.status
    - cat pytest.status
    - "echo test end: $(date +'%Y%-%m-%d %H:%M:%S %s')"

  artifacts:
    when: on_failure
    paths:
        - pipfreeze_tst_py310_dj42.txt
        - pytest.log
        - pytest.status
    expire_in: 1 week


# ############################################################################
# Deploy stage
# ############################################################################

deploy-prod:
  stage: deploy
  script:
    - echo "DEPLOY FROM $CI_COMMIT_BRANCH branch (TODO)"
  when: manual
  environment: production
